Ben Aoki-Sherwood, Kenyon Nystrom, and Avery wattsa2

PART 1
Passwords cracked: 1157
Total time: 0:31.334
Number of hashes computed: 267751
Passwords cracked per number of hashes computed: 0.0043211
Time per password cracked:0.02708s

PART 2
Passwords cracked: 1132
Total time: 41:44.993
Number of hashes computed: 621455537
Passwords cracked per number of hashes computed: 0.0000018215
Time per password cracked: 2.213s

Factor by which the time per password lengthened: 81.7. This was because we had
to compute a lot more hashes (about 2000x more) to get each password than we
did the first time. Without salting, we could test each hashed word against every
password, but with a unique salt contributing to the hash of each password,
we needed a new hash for every word/password attempt. This is why it took
so much longer the second time. However, we would expect the time difference
factor to be about the same as the factor between the number of hashed we had
to compute (again, about 2000x more), so this factor is much smaller than
expected. This could be due to the overhead of writing to the output file,
which should take about the same amount of time in each part because we found
about the same number of passwords. A constant time overhead such as this would
be a much larger time increase relative to the shorter time than the larger time,
making the ratio between them smaller. 

In both parts, we only tried to crack the single-word passwords because we found
that it would take a long time to crack even the unsalted two-word passwords.
